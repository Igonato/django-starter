---
name: Django CI

'on':
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 1'  # Weekly

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
        db:
          - name: PostgreSQL
            image: postgres
            version: latest
            engine: django.db.backends.postgresql
            user: postgres
            port: '5432'
          - name: MySQL
            image: mysql
            version: latest
            engine: django.db.backends.mysql
            user: root
            port: '3306'
          - name: MariaDB
            image: mariadb
            version: latest
            engine: django.db.backends.mysql
            user: root
            port: '3306'
    env:
      PY_COLORS: '1'
      SECRET_KEY: cn2^51(@(iqco@@(%sbbe2_l=mg(z1+1#x(k_f5=!@#vowli4xd
      ALLOWED_HOSTS: .localhost 127.0.0.1 [::1]

      DB_IMAGE: ${{ matrix.db.image }}
      DB_IMAGE_VERSION: ${{ matrix.db.version }}
      DB_ENGINE: ${{ matrix.db.engine }}
      DB_PORT: ${{ matrix.db.port }}
      DB_NAME: default
      DB_USER: ${{ matrix.db.user }}
      DB_PASSWORD: mypassword
      DB_HOST: '127.0.0.1'

      REDIS_HOST: '127.0.0.1'
      REDIS_PORT: '6379'

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Start and wait for the database container
        run: |
          touch .env
          docker-compose --profile db up -d
          while ! nc -z $DB_HOST $DB_PORT; do
            sleep 0.1
          done

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Pipenv
        run: pip install pipenv

      - name: Install project requirements
        run: pipenv install

      - name: Run lint
        run: pipenv run flake8 --exclude migrations

      - name: Run tests
        run: pipenv run test

      - name: Check settings defaults
        run: pipenv run python manage.py check --deploy --fail-level WARNING

      - name: Upload coverage report to Codecov
        run: bash <(curl -s https://codecov.io/bash)
